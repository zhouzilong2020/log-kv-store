#!/usr/bin/env python3

import itertools
import argparse
import subprocess
import random
import psutil
import time
import string
import shutil
import os
import numpy as np
from rich.progress import Progress, BarColumn, TimeRemainingColumn, SpinnerColumn

dir_path = './.persist'
kv_types = ["log", "naive"]


def generate_random_string(length):
    """Generate a random string of the given length."""
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(length))


def run_experiment(kv_type: str, cmd_list: list, p):
    # Delete the directory and all its contents
    if os.path.exists(dir_path):
        shutil.rmtree(dir_path)
    os.mkdir(dir_path)
    proc = subprocess.Popen(
        ["./log_kv", "-t", kv_type],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    )

    if proc.poll() is not None:
        raise RuntimeError("log_kv process has terminated unexpectedly")
    task = p.add_task("running exp", total=len(cmd_list))
    result = []

    start_time = time.time()
    for i, cmd in enumerate(cmd_list):
        cmd_str = " ".join(cmd)+"\n"
        proc.stdin.write(cmd_str.encode())
        proc.stdin.flush()
        proc.stdout.readline()  # we don't care about the output
        p.update(task_id=task, advance=1)

        if (i+1) % 50000 == 0:
            elapsed_time = time.time() - start_time
            mem_used = psutil.Process(proc.pid).memory_info().rss
            result.append([i+1, i/elapsed_time, elapsed_time, mem_used])

    mem_used = psutil.Process(proc.pid).memory_info().rss
    proc.stdin.write("quit\n".encode())
    proc.stdin.flush()
    elapsed_time = time.time() - start_time
    p.remove_task(task_id=task)
    # [cmd_cnt, throughput, elapsed_time, mem_used]
    result.append([len(cmd_list), len(cmd_list) /
                  elapsed_time, elapsed_time, mem_used])
    return result


value = generate_random_string(500)


def prepare_cmd(cmd_num: int, hot_key: float, hot_rate: float, hit_rate: float, read_fraction: float, p):
    def put():
        key = generate_random_string(100)
        if random.randint(0, 1000) < hot_key*1000:
            # hot key
            hot_list.append(key)
        else:
            key_list.append(key)
        cmd_list.append(["put", key, value])

    def delete():
        key = random.choice(key_list)
        key_list.remove(key)
        if key in read_set:
            read_set.remove(key)
        cmd_list.append(["delete", key])

    def get():
        is_hit = random.randint(0, 1000) < hit_rate*1000
        if is_hit:
            if random.randint(0, 1000) < hot_rate*1000:
                key = random.choice(hot_list)
            else:
                key = random.choice(key_list)
            read_set.add(key)
        else:
            key = generate_random_string(100)
        cmd_list.append(["get", key])

    task = p.add_task("Preparing Data", total=cmd_num)
    key_list = []
    hot_list = []
    read_set = set()
    cmd_list = []
    # put something before update
    for i in range(1000):
        put()

    for i in range(cmd_num):
        p.update(task_id=task, advance=1)
        op = random.randint(0, 100)
        if len(key_list) > 0:
            if op < read_fraction * 100:
                get()
            else:
                # uniform delete and put
                if op % 10 == 0:
                    delete()
                else:
                    put()
        else:
            put()
    p.remove_task(task_id=task)
    return cmd_list, (len(key_list)+len(hot_list))*602


def cartesian_arguments():
    cmd_range = [500000]
    hot_key_fractions = [0.05, 0.1, 0.2]
    hot_rates = [0.05, 0.7, 0.8, 0.9]
    hit_rates = [0.1, 0.2, 0.6, 0.8, 0.99]
    read_fractions = [0.2, 0.4, 0.6, 0.8]
    argument_sets = list(itertools.product(
        cmd_range, hot_key_fractions, hot_rates, hit_rates, read_fractions
    ))
    for args in argument_sets:
        if args[1] > args[2]:  # invalid argument, can not have the hot rate smaller than the hot key fraction
            continue
        yield args


def example_arguments():
    cmd_num = 1000000
    argument_list = [
        [cmd_num, 0, 0, 0.95, 0.05],      # write_intensive_no_hotkey
        [cmd_num, 0.2, 0.6, 0.95, 0.05],  # write_intensive_hotkey
        [cmd_num, 0, 0, 0.95, 0.8],       # read_intensive_no_hotkey
        [cmd_num, 0.2, 0.6, 0.95, 0.8],   # read_intensive_hotkey
    ]
    for args in argument_list:
        yield args


parser = argparse.ArgumentParser(description="run experiment")
parser.add_argument("experiment_type",
                    help="experiment type, c for cartesian, e for example")
experiment_type = parser.parse_args().experiment_type

resPath = "./exp"
if not os.path.exists(resPath):
    os.mkdir(resPath)
# Create a progress bar for the total progress
with Progress(
    "[progress.description]{task.description}",
    SpinnerColumn(),
    BarColumn(),
    "[progress.percentage]{task.percentage:>3.0f}%",
    TimeRemainingColumn(),
) as p:
    total = 0
    iteration = 1
    argument_generator = None
    if experiment_type == "c":
        total = iteration*2*3*4*5*4
        argument_generator = cartesian_arguments
    elif experiment_type == "e":
        total = iteration*2*4
        argument_generator = example_arguments
    else:
        print("Invalid input")
        exit(1)

    task = p.add_task("Total progress", total=total)
    for args in argument_generator():
        p.log(
            "preparing data for:"
            f"cmd_cnt {args[0]}\t"
            f"hot_key {args[1]}\t"
            f"hot_rate {args[2]}\t"
            f"hit_rate {args[3]}\t"
            f"read_fraction {args[4]}"
        )
        cmd, mem_expected = prepare_cmd(*args[:5], p)
        result_list = []
        for kv_type in kv_types:
            p.log(f"running {kv_type}")
            results = []
            for i in range(iteration):
                result = run_experiment(kv_type, cmd, p)
                results.append(result)
                p.update(task_id=task, advance=1, refresh=True)
            p.log(f"finished {kv_type}")
            result_list.append(results)
        p.log("dumped result")
        np.save(
            f"{resPath}/{args[1]:.2f}-{args[2]:.2f}-{args[3]:.2f}-{args[4]:.2f}-{mem_expected}", np.array(result_list))
